/////////////////////////////
// BuildScript and Plugins //
/////////////////////////////

buildscript {
    repositories {
        jcenter()
        maven {
            name 'Forge'
            url 'http://files.minecraftforge.net/maven'
        }
    }
    dependencies {
        classpath(group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true) {
            exclude group: 'trove', module: 'trove'
        }
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id "com.github.hierynomus.license" version "0.15.0"
}

apply plugin: 'net.minecraftforge.gradle'

configurations {
    embed
    compile.extendsFrom embed
}

//////////////////
// Dependencies //
//////////////////

repositories {
    mavenCentral()
    maven {
        url 'https://files.minecraftforge.net/maven'
    }
    maven {
        url 'https://minecraft.curseforge.com/api/maven/'
    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', 'version': "$minecraft_version-$forge_version"

    compile group: 'kottle', name: 'Kottle', 'version': kottle_version

    embed group: 'org.jetbrains.kotlin', name: 'kotlin-compiler-embeddable', 'version': kotlin_version
    embed group: 'org.jetbrains.kotlin', name: 'kotlin-compiler-client-embeddable', 'version': kotlin_version
    embed group: 'org.jetbrains.kotlin', name: 'kotlin-scripting-compiler-embeddable', 'version': kotlin_version
    embed group: 'org.jetbrains.kotlin', name: 'kotlin-script-util', 'version': kotlin_version
}

//        include(dependency("org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-script-util:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-scripting-common:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-scripting-compiler-impl-embeddable:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-scripting-jvm:$kotlin_version"))
//        include(dependency("org.jetbrains.intellij.deps:trove4j:1.0.2181211"))

minecraft {
    mappings channel: 'snapshot', version: forge_mappings

    runs {
        client {
            properties 'forge.logging.markers': 'REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            properties 'fml.earlyprogresswindow': 'false'
            mods {
                makro {
                    source sourceSets.main
                }
            }
        }
    }
}

///////////////
// Artifacts //
///////////////

tasks {
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
}

version = "$minecraft_version-$mod_version"

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version':project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

//shadowJar {
//    classifier = ''
//
//    // TODO: See how we can clean up / slim down this panicked mess of shading what I need
//    dependencies {
//        include(dependency("org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-compiler-client-embeddable:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-script-util:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-scripting-common:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-scripting-compiler-impl-embeddable:$kotlin_version"))
//        include(dependency("org.jetbrains.kotlin:kotlin-scripting-jvm:$kotlin_version"))
//        include(dependency("org.jetbrains.intellij.deps:trove4j:1.0.2181211"))
//    }
//}

// Custom task to generate the metadata files required for our dependencies
task generateMetaFiles {
    // Code for execution after the whole buildscript was parsed and loaded
    doLast {
        // Clear the dependencyMeta directory since we don't want old dependencies to still be listed in there
        file("${buildDir}/dependencyMeta/").deleteDir()
        configurations.embed.resolvedConfiguration.resolvedArtifacts.each {
            // Create a meta file for each dependency in a specified directory
            def metaFile = file("${buildDir}/dependencyMeta/${it.file.name}.meta")
            metaFile.parentFile.mkdirs()
            // Use the Gradle notation provided by the API ('group:artifact:version') for the meta file...
            def artifactRef = it.moduleVersion.toString()
            // ...and append the classifier if present
            if (it.classifier != null) {
                artifactRef += ":${it.classifier}"
            }
            // Write the artifact information to the meta file, to be used by the
            metaFile.text = "Maven-Artifact: $artifactRef"
        }
    }
}

jar {
    into('/META-INF/libraries/') {
        // Add all of the dependency JARs to the main JAR for later extraction
        from configurations.embed
        // Also include all dependency meta files
        from "${buildDir}/dependencyMeta/"
    }
    manifest {
        // The crucial manifest attribute: Make Forge extract the contained JARs
        attributes 'ContainedDeps': configurations.embed.collect { it.name }.join(' ')
    }
    // Only run the main jar task after the meta files were built
    dependsOn generateMetaFiles
}

//tasks.build.dependsOn shadowJar

//reobf {
//    shadowJar {}
//}

task deobfJar(type: Jar) {
    from sourceSets.main.output
            classifier = 'deobf'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
            classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives javadocJar
}


///////////////
// Licencing //
///////////////

license {
    include "**/*.kt"
}
